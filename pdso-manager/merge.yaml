name: CI Merge Workflow

on:
  push:
    branches: [main]
    paths-ignore:      
    - '**/Chart.yaml'
    - '**/Makefile'
    - '**/README.md'   
    - '**/.gitignore'        
    - '**/workflows/**'

concurrency:
  group: cicd_merge

jobs:
  set-matrix:
    runs-on: [k8s]  
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get matrix inputs
        id: set-matrix
        run: |
          echo matrix=$(git diff --name-only HEAD HEAD~1|egrep 'charts|apps' |awk -F '/' '{print $2}'|awk '!seen[$0]++' | jq -R -s -c 'split("\n") | map(select(length > 0))') >> $GITHUB_OUTPUT 
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }} 
          
  security:
    needs: [set-matrix]
    runs-on: [k8s] 
    container:
      image: hitachi.jfrog.io/docker/pdso-bootstrap/pdso-node:20.5.0-bullseye-slim
      credentials:
        username: ${{ vars.PDSO_ARTIFACTORY_USERNAME }}
        password: ${{ secrets.PDSO_ARTIFACTORY_TOKEN }}    
    permissions: write-all
    name: '${{ matrix.project }} security suite'
    strategy:
      matrix:
        project: ${{ fromJson(needs.set-matrix.outputs.matrix) }}
    steps:
      - name: Security
        uses: pentaho/pentaho-composite-actions@security
        id: security
        with:
          projectName: ${{ matrix.project }}
          paToken: ${{ secrets.PA_TOKEN }}
          isTrivy: false
          isSonar: true
          sonarToken: ${{ secrets.PDSO_SONAR_TOKEN }}
          sonarHostUrl: ${{ vars.PDSO_SONAR_HOST_URL }}
          globalArtifactoryUser: ${{ vars.PDSO_ARTIFACTORY_USERNAME }}
          globalArtifactoryToken: ${{ secrets.PDSO_ARTIFACTORY_TOKEN }}
  
  docker:
    needs: [set-matrix, security]
    runs-on: [k8s]         
    name: '${{ matrix.project }} docker build'    
    strategy:
      matrix:
        project: ${{ fromJson(needs.set-matrix.outputs.matrix) }}                 
    steps: 
      - name: Docker Build & Push
        uses: pentaho/pentaho-composite-actions@docker
        id: docker
        with:
          projectName: ${{ matrix.project }}
          globalArtifactoryUser: ${{ vars.PDSO_ARTIFACTORY_USERNAME }}
          globalArtifactoryToken: ${{ secrets.PDSO_ARTIFACTORY_TOKEN }} 
          gitSAName: ${{ vars.HV_ACTIONS_GIT_EMAIL }}
          gitSAUser: ${{ vars.HV_ACTIONS_GIT_USER }} 
          vitePdsoApi: ${{ vars.VITE_PDSO_API }}
          vitePdcApi: ${{ vars.VITE_PDC_API }}
          vitePdcUiUrl: ${{ vars.VITE_PDC_UI_URL }} 
                  

  helm:
    needs: [set-matrix, security, docker]
    runs-on: [k8s]           
    name: '${{ matrix.project }} helm package'       
    strategy:
      matrix:
        project: ${{ fromJson(needs.set-matrix.outputs.matrix) }}               
    steps: 
      - name: Helm Package & Push
        uses: pentaho/pentaho-composite-actions@helm
        id: helm
        with:
          projectName: ${{ matrix.project }}
          globalArtifactoryUser: ${{ vars.PDSO_ARTIFACTORY_USERNAME }}
          globalArtifactoryToken: ${{ secrets.PDSO_ARTIFACTORY_TOKEN }} 
          gitSAName: ${{ vars.HV_ACTIONS_GIT_EMAIL }}
          gitSAUser: ${{ vars.HV_ACTIONS_GIT_USER }} 
                

  slack:
    needs: [set-matrix, security, docker, helm]
    if: ${{ always() && contains(needs.*.result, 'failure') }}
    runs-on: [k8s] 
    name: 'slack notify'    
    steps: 
      - name: Slack
        uses: pentaho/pentaho-composite-actions@slack
        id: slack
        with:
          slackWebhookUrl: ${{ secrets.PDSO_WEBHOOK_URL }}  
